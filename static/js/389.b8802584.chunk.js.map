{"version":3,"file":"static/js/389.b8802584.chunk.js","mappings":"qOACA,EAA4B,gCAA5B,EAAmE,2BAAnE,EAAsG,4BAAtG,EAA0I,4BAA1I,EAA8K,4BAA9K,EAAmN,6B,SCKpM,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAQO,GACjB,IAAK,QACH,OAAOL,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,SAgBJ,OACI,iBAAKC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,kCAEA,kBAAOC,SAhBM,SAAAC,GACnBA,EAAEC,iBACFhB,EAASiB,EAAAA,EAAAA,SAAwB,CAAEd,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAKhDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAOyBI,UAAWC,EAA1C,WACE,mBAAOD,UAAWC,EAAlB,kBAEE,kBAAOD,UAAWC,EAClBK,KAAK,OACLf,KAAK,OACLQ,MAAOR,EACPgB,SAAUV,EACVW,QAAQ,yHACRC,UAAQ,QAGV,mBAAOT,UAAWC,EAAlB,mBAEE,kBAAOD,UAAWC,EAChBK,KAAK,QACLf,KAAK,QACLQ,MAAON,EACPc,SAAUV,EACVY,UAAQ,QAGZ,mBAAOT,UAAWC,EAAlB,sBAEE,kBAAOD,UAAWC,EAChBK,KAAK,WACLf,KAAK,WACLQ,MAAOJ,EACPY,SAAUV,EACVa,aAAa,MACbF,QAAQ,8BACRC,UAAQ,QAGZ,mBAAQT,UAAWC,EAAUK,KAAK,SAAlC","sources":["webpack://goit-react-hw-08-phonebook/./src/views/RegisterView/RegisterView.module.css?6d4e","views/RegisterView/RegisterView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterView_container__pHXaJ\",\"form\":\"RegisterView_form__q9n4X\",\"label\":\"RegisterView_label__Aacwx\",\"title\":\"RegisterView_title__fF0wn\",\"input\":\"RegisterView_input__UcX6h\",\"button\":\"RegisterView_button__hnqJ8\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from 'redux/auth/auth-operations';\nimport s from './RegisterView.module.css'\n\n\nexport default function RegisterView(){\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    reset();\n  };\n\n  function reset() {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n    return (\n        <div className={s.container}>\n          <h1 className={s.title}>Create your account</h1>\n    \n          <form  onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n              Name\n              <input className={s.input}\n              type=\"text\" \n              name=\"name\" \n              value={name} \n              onChange={handleChange} \n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              required />\n            </label>\n    \n            <label className={s.label}>\n            Email\n              <input className={s.input}\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n                required />\n            </label>\n    \n            <label className={s.label}>\n            Password\n              <input className={s.input}\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n                autoComplete=\"off\" \n                pattern=\"(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n                required\n              />\n            </label>\n            <button className={s.button} type=\"submit\">Sign up</button>\n          </form>\n        </div>\n      );\n}"],"names":["RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","className","s","onSubmit","e","preventDefault","authOperations","type","onChange","pattern","required","autoComplete"],"sourceRoot":""}