{"version":3,"file":"static/js/798.33d1d85e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/views/PhonebookView/PhonebookView.module.css?50e9","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","redux/contacts/contats-selectors.js","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","views/PhonebookView/PhonebookView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PhonebookView_title__jiVvS\",\"container\":\"PhonebookView_container__RNs2M\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const inputName = nanoid();\n  const inputNumber = nanoid();\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label htmlFor={inputName} className={s.label}>\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          id={inputName}\n          className={s.input}\n          placeholder=\"Enter contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label htmlFor={inputNumber} className={s.label}>\n          Number\n        </label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          id={inputNumber}\n          className={s.input}\n          placeholder=\"Enter phone number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Filter_title__pSkfx\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","export const getFilter = state => state.contacts.filter;\nconst getContacts = state => state.contacts.items;\n\nexport const getVisibleContacts = state => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n\n  const normalizeFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter),\n  );\n};\n\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './Filter.module.css';\nimport { contactSearch } from 'redux/contacts/contacts-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contats-selectors';\n\nconst Filter = () => {\n  const inputFilter = nanoid();\n\n  const value = useSelector(state => getFilter(state));\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h3 className={s.title}>Find contacts by name</h3>\n      <label htmlFor={inputFilter} className={s.label}>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={e => dispatch(contactSearch(e.currentTarget.value))}\n          id={inputFilter}\n          className={s.input}\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"button\":\"ContactList_button__7kL4l\"};","import React from 'react';\nimport s from './ContactList.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getVisibleContacts} from 'redux/contacts/contats-selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => getVisibleContacts(state));\n\n  const onDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li className={s.item} key={id}>\n            {name}: {number}\n            <button\n              type=\"button\"\n              onClick={() => onDelete(id)}\n              className={s.button}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React, {useEffect} from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport s from './PhonebookView.module.css'\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authSelectors } from \"redux/auth\";\n\n\n\nexport default function PhonebookView() {\n    const contacts = useSelector(state => state.contacts.items);\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n    const dispatch = useDispatch();\n\n    useEffect(() => { \n      if (!isLoggedIn) {\n      return;\n    }\n    dispatch(fetchContacts())}, [isLoggedIn, dispatch]\n    );\n\n    return (\n        <div className={s.container}>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={s.title}>Contacts</h2>\n        {contacts.length > 0 ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <p>You don't have any contacts</p>\n        )}\n      </div>\n      );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","name","setName","number","setNumber","dispatch","useDispatch","inputName","inputNumber","handleChange","e","target","value","reset","onSubmit","preventDefault","addContact","className","s","htmlFor","type","onChange","placeholder","pattern","title","required","getFilter","state","contacts","filter","inputFilter","useSelector","contactSearch","currentTarget","items","getContacts","normalizeFilter","toLowerCase","contact","includes","getVisibleContacts","map","onClick","deleteContact","onDelete","PhonebookView","isLoggedIn","authSelectors","useEffect","fetchContacts","length"],"sourceRoot":""}